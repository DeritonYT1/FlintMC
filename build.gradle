buildscript {
    def versionFile = file(".dev-version")
    def fixedVersion = null
    if(versionFile.exists()) {
        fixedVersion = versionFile.text.replace("\n","")
    } else {
        throw new GradleScriptException("VERSIONFILE COULD NOT BE FOUND!", new Throwable("Please check the CI!"))
    }

    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath "net.labyfy:labyfy-gradle-plugin:1.0.0"
    }

    repositories {
        maven {
            url = System.getenv().getOrDefault('artifactory_contextUrl' + "general/", "${artifactory_contextUrl}general/")
        }
        mavenCentral()
        jcenter()
        mavenLocal()
    }
}

apply plugin: 'net.labyfy.labyfy-gradle-plugin'

repositories{
    mavenCentral()
    mavenLocal()
}

def versionFile = file(".dev-version")
def fixedVersion = null
if(versionFile.exists()) {
    fixedVersion = versionFile.text.replace("\n","")
} else {
    throw new GradleScriptException("VERSIONFILE COULD NOT BE FOUND!", new Throwable("Please check the CI!"))
}

allprojects {

    buildscript {
        repositories {
            maven {
                url = System.getenv().getOrDefault('artifactory_contextUrl' + "general/", "${artifactory_contextUrl}general/")
            }
            mavenCentral()
            jcenter()
            mavenLocal()
        }
    }

    apply plugin: 'maven'
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'

    configurations {
        labyManifest
    }

    artifactory {
        contextUrl = System.getenv().getOrDefault('artifactory_contextUrl', "${artifactory_contextUrl}")
        //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey = 'labymedia'
                username = System.getenv().getOrDefault("artifactory_user", "${artifactory_user}")
                password = System.getenv().getOrDefault("artifactory_password", "${artifactory_password}")
                maven = true

            }
            defaults {
                publications('mavenJava')
            }
        }
        resolve {
            repository {
                repoKey = 'general'
                username = System.getenv().getOrDefault("artifactory_user", "${artifactory_user}")
                password = System.getenv().getOrDefault("artifactory_password", "${artifactory_password}")
                maven = true

            }
        }
    }
}

allprojects {
    version fixedVersion
    plugins.withType(JavaPlugin) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }
                }
            }
        }
    }
}
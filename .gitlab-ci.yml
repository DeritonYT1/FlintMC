stages:
  - version
  - build
  - test
  - deploy
  - publish
  - replay

variables:
  SCRIPTS_REPO: "git@git.labymod.net:client/labymod4/common-scripts.git"

before_script:
  - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  - ssh-keyscan git.labymod.net >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - export SCRIPTS_DIR=$(mktemp -d)
  - git clone -q --depth 1 "$SCRIPTS_REPO" "$SCRIPTS_DIR"
  - bash $SCRIPTS_DIR/genSemVer.sh build ${CI_JOB_ID} > .dev-version

version:
  stage: version
  script:
    - bash $SCRIPTS_DIR/versionPreCheck.sh "${CI_COMMIT_MESSAGE}"
    - bash $SCRIPTS_DIR/genSemVer.sh $(cat BUMP_TYPE) > .dev-version
    - export TAG=$(cat .dev-version)
    - git config --global user.email "gitlab-ci@gitlab.labymod.net"
    - git config --global user.name "gitlab-ci"
    - git remote set-url --push origin "git@git.labymod.net:client/labymod4/Labyfy.git"
    - git tag -a ${TAG} -m "${CI_COMMIT_MESSAGE}"
    - git push origin ${TAG}
  artifacts:
    paths:
      - .dev-version
  only:
    - master

build:
  stage: build
  script:
    - sh $SCRIPTS_DIR/eval.sh
    - sh $SCRIPTS_DIR/eval.sh "./labyfy-gradle-plugin/"
    - mkdir run && cp -r run-template/1.15.2 run && cp -r run-template/1.15.2/Labyfy versioned/labyfy-1.15.2 && ls -la versioned/labyfy-1.15.2
    - sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user build --stacktrace --refresh-dependencies
  only:
    - branches
  except:
    - master

deploy_to_artifactory:
  stage: deploy
  script:
    - sh $SCRIPTS_DIR/eval.sh
    - sh $SCRIPTS_DIR/eval.sh "./labyfy-gradle-plugin/"
    - mkdir run && cp -r run-template/1.15.2 run && cp -r run-template/1.15.2/Labyfy versioned/labyfy-1.15.2 && ls -la versioned/labyfy-1.15.2
    - bash $SCRIPTS_DIR/branchingPreCheck.sh
    - bash $SCRIPTS_DIR/genSemVer.sh prerel SNAPSHOT > .dev-version || exit 1
    - sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user artifactoryPublish --stacktrace
    - cd ./labyfy-gradle-plugin/ && sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user artifactoryPublish --stacktrace
  environment:
    name: development
  only:
    - develop
  when: on_success

lm_distributor_release:
  stage: publish
  script:
    - sh $SCRIPTS_DIR/eval.sh
    - sh $SCRIPTS_DIR/eval.sh "./labyfy-gradle-plugin/"
    - mkdir run && cp -r run-template/1.15.2 run && cp -r run-template/1.15.2/Labyfy versioned/labyfy-1.15.2 && ls -la versioned/labyfy-1.15.2
    - bash $SCRIPTS_DIR/branchingPreCheck.sh
    - bash $SCRIPTS_DIR/genSemVer.sh release > .dev-version || exit 1
    - sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user artifactoryPublish --stacktrace
    - cd ./labyfy-gradle-plugin/ && sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user artifactoryPublish --stacktrace
    - cd .. && sh gradlew -Plabyfy_publish_url=$LABYFY_PUBLISH_URL -Partifactory_contextUrl=$artifactory_contextUrl -Partifactory_password=$artifactory_password -Partifactory_user=$artifactory_user -Plabyfy_publish_token=$LABYFY_PUBLISH_TOKEN :versioned:labyfy-1.15.2:publishLabyfyLatestRelease
  environment:
    name: production
  only:
    - tags
  when: on_success

update_develop_version:
  stage: replay
  script:
    - git checkout origin/develop
    - git pull origin master
    - bash $SCRIPTS_DIR/genSemVer.sh release > .dev-version || exit 1
    - export VERSION=$(cat .dev-version)
    - rm -r semver-tool
    - git commit -a -m "${VERSION}"
    - git config --global push.default simple
    - git push origin HEAD:develop
  only:
    - tags
  when: on_success

gitlab_release:
  stage: replay
  image: registry.gitlab.com/gitlab-org/release-cli
  tags:
    - docker
  script:
    - release-cli create --name "v$(cat .dev-version)" --description $CI_COMMIT_DESCRIPTION --tag-name $(cat .dev-version) --ref $CI_COMMIT_SHA
  only:
    - tags
  when: on_success

sentry_release:
  stage: replay
  image: registry.gitlab.com/gitlab-org/release-cli
  tags:
    - docker
  script:
    - bash $SCRIPTS_DIR/releseVersionToSentry.sh labyfy "v$(cat .dev-version)" ${SENTRY_AUTH_TOKEN} ${SENTRY_URL}
  only:
    - tags
  when: on_success

check_against_develop:
  stage: replay
  script:
    - git pull origin HEAD:develop
  only:
    - branches
  except:
    - develop